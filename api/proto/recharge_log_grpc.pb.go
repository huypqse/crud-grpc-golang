// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/proto/recharge_log.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RechargeLogService_CreateRechargeLog_FullMethodName  = "/api.RechargeLogService/CreateRechargeLog"
	RechargeLogService_StreamRechargeLogs_FullMethodName = "/api.RechargeLogService/StreamRechargeLogs"
)

// RechargeLogServiceClient is the client API for RechargeLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RechargeLogServiceClient interface {
	CreateRechargeLog(ctx context.Context, in *CreateRechargeRequest, opts ...grpc.CallOption) (*RechargeLogResponse, error)
	//Allow user service can create with more create recharge
	StreamRechargeLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateRechargeRequest, RechargeLogResponse], error)
}

type rechargeLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRechargeLogServiceClient(cc grpc.ClientConnInterface) RechargeLogServiceClient {
	return &rechargeLogServiceClient{cc}
}

func (c *rechargeLogServiceClient) CreateRechargeLog(ctx context.Context, in *CreateRechargeRequest, opts ...grpc.CallOption) (*RechargeLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargeLogResponse)
	err := c.cc.Invoke(ctx, RechargeLogService_CreateRechargeLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rechargeLogServiceClient) StreamRechargeLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CreateRechargeRequest, RechargeLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RechargeLogService_ServiceDesc.Streams[0], RechargeLogService_StreamRechargeLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateRechargeRequest, RechargeLogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RechargeLogService_StreamRechargeLogsClient = grpc.BidiStreamingClient[CreateRechargeRequest, RechargeLogResponse]

// RechargeLogServiceServer is the server API for RechargeLogService service.
// All implementations must embed UnimplementedRechargeLogServiceServer
// for forward compatibility.
type RechargeLogServiceServer interface {
	CreateRechargeLog(context.Context, *CreateRechargeRequest) (*RechargeLogResponse, error)
	//Allow user service can create with more create recharge
	StreamRechargeLogs(grpc.BidiStreamingServer[CreateRechargeRequest, RechargeLogResponse]) error
	mustEmbedUnimplementedRechargeLogServiceServer()
}

// UnimplementedRechargeLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRechargeLogServiceServer struct{}

func (UnimplementedRechargeLogServiceServer) CreateRechargeLog(context.Context, *CreateRechargeRequest) (*RechargeLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRechargeLog not implemented")
}
func (UnimplementedRechargeLogServiceServer) StreamRechargeLogs(grpc.BidiStreamingServer[CreateRechargeRequest, RechargeLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRechargeLogs not implemented")
}
func (UnimplementedRechargeLogServiceServer) mustEmbedUnimplementedRechargeLogServiceServer() {}
func (UnimplementedRechargeLogServiceServer) testEmbeddedByValue()                            {}

// UnsafeRechargeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RechargeLogServiceServer will
// result in compilation errors.
type UnsafeRechargeLogServiceServer interface {
	mustEmbedUnimplementedRechargeLogServiceServer()
}

func RegisterRechargeLogServiceServer(s grpc.ServiceRegistrar, srv RechargeLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedRechargeLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RechargeLogService_ServiceDesc, srv)
}

func _RechargeLogService_CreateRechargeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RechargeLogServiceServer).CreateRechargeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RechargeLogService_CreateRechargeLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RechargeLogServiceServer).CreateRechargeLog(ctx, req.(*CreateRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RechargeLogService_StreamRechargeLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RechargeLogServiceServer).StreamRechargeLogs(&grpc.GenericServerStream[CreateRechargeRequest, RechargeLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RechargeLogService_StreamRechargeLogsServer = grpc.BidiStreamingServer[CreateRechargeRequest, RechargeLogResponse]

// RechargeLogService_ServiceDesc is the grpc.ServiceDesc for RechargeLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RechargeLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RechargeLogService",
	HandlerType: (*RechargeLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRechargeLog",
			Handler:    _RechargeLogService_CreateRechargeLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRechargeLogs",
			Handler:       _RechargeLogService_StreamRechargeLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/recharge_log.proto",
}
